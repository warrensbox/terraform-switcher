{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction to tfswitch","text":"<p>The <code>tfswitch</code> command line tool lets you switch between different versions of terraform. If you do not have a particular version of terraform installed, <code>tfswitch</code> lets you download the version you desire. The installation is minimal and easy.  Once installed, simply select the version you require from the dropdown and start using terraform. </p>"},{"location":"Continuous-Integration/","title":"CI/CD Examples","text":""},{"location":"Continuous-Integration/#jenkins-setup","title":"Jenkins setup","text":"<pre><code>#!/bin/bash \n\necho \"Installing tfswitch locally\"\nwget https://raw.githubusercontent.com/warrensbox/terraform-switcher/master/install.sh  #Get the installer on to your machine\n\nchmod 755 install.sh #Make installer executable\n\n./install.sh -b `pwd`/.bin      #Install tfswitch in a location you have permission\n\nCUSTOMBIN=`pwd`/.bin            #set custom bin path\n\nexport PATH=$PATH:$CUSTOMBIN    #Add custom bin path to PATH environment\n\n$CUSTOMBIN/tfswitch -b $CUSTOMBIN/terraform 0.11.7 #or simply tfswitch -b $CUSTOMBIN/terraform 0.11.7\n\n#OR \n$CUSTOMBIN/tfswitch -d 0.11.7 -b $CUSTOMBIN/terraform  #or simply tfswitch -d 0.11.7 -b $CUSTOMBIN/terraform \n\nterraform -v                    #testing version\n</code></pre>"},{"location":"Continuous-Integration/#circle-ci-setup","title":"Circle CI setup","text":"<p>Example config yaml</p> <pre><code>version: 2\njobs:\n  build:\n    docker:\n      - image: ubuntu\n\n    working_directory: /go/src/github.com/warrensbox/terraform-switcher\n\n    steps:\n      - checkout\n      - run: \n          command: |    \n            set +e   \n            apt-get update \n            apt-get install -y wget \n            rm -rf /var/lib/apt/lists/*\n\n            echo \"Installing tfswitch locally\"\n\n            wget https://raw.githubusercontent.com/warrensbox/terraform-switcher/master/install.sh  #Get the installer on to your machine\n\n            chmod 755 install.sh            #Make installer executable\n\n            ./install.sh -b `pwd`/.bin      #Install tfswitch in a location you have permission\n\n            CUSTOMBIN=`pwd`/.bin            #set custom bin path\n\n            export PATH=$PATH:$CUSTOMBIN    #Add custom bin path to PATH environment\n\n            $CUSTOMBIN/tfswitch -b $CUSTOMBIN/terraform 0.11.7 #or simply tfswitch -b $CUSTOMBIN/terraform 0.11.7\n\n            #OR \n            $CUSTOMBIN/tfswitch -d 0.11.7 -b $CUSTOMBIN/terraform  #or simply tfswitch -d 0.11.7 -b $CUSTOMBIN/terraform \n\n            terraform -v                    #testing version\n</code></pre>"},{"location":"How-to-Contribute/","title":"How to Contribute","text":""},{"location":"How-to-Contribute/#step-by-step-instructions","title":"Step-by-step instructions","text":"<p>An open source project becomes meaningful when people collaborate to improve the code. </p> <p>Feel free to look at the code, critique and make suggestions. Let's make <code>tfswitch</code> better!</p>"},{"location":"How-to-Contribute/#required-version","title":"Required version","text":"<pre><code>go version 1.23\n</code></pre>"},{"location":"How-to-Contribute/#step-1-create-workspace","title":"Step 1 - Create workspace","text":"<p>Skip this step if you already have a GitHub go workspace  Create a GitHub workspace.</p> <p></p>"},{"location":"How-to-Contribute/#step-2-set-gopath","title":"Step 2 - Set GOPATH","text":"<p>Skip this step if you already have a GitHub go workspace  Export your GOPATH environment variable in your <code>go</code> directory.   </p> <pre><code>export GOPATH=`pwd`\n</code></pre> <p></p>"},{"location":"How-to-Contribute/#step-3-clone-repository","title":"Step 3 - Clone repository","text":"<p>Git clone this repository.  </p> <pre><code>git clone git@github.com:warrensbox/terraform-switcher.git\n</code></pre> <p></p>"},{"location":"How-to-Contribute/#step-4-get-dependencies","title":"Step 4 - Get dependencies","text":"<p>Go get all the dependencies.   </p> <pre><code>go mod download\n</code></pre> <pre><code>go get -v -t -d ./...\n</code></pre> <p>Test the code (optional).</p> <pre><code>go vet -tests=false ./...\n</code></pre> <pre><code>go test -v ./...\n</code></pre> <p></p>"},{"location":"How-to-Contribute/#step-5-build-executable","title":"Step 5 - Build executable","text":"<p>Create a new branch.   </p> <pre><code>git checkout -b feature/put-your-branch-name-here\n</code></pre> <p>Refactor and add new features to the code. Go build the code.   </p> <pre><code>go build -o test-tfswitch\n</code></pre> <p>Test the code and create a new pull request!</p> <p></p>"},{"location":"How-to-Contribute/#contributors","title":"Contributors","text":"<p>Click here to see all contributors.</p>"},{"location":"Installation/","title":"Installation","text":"<p><code>tfswitch</code> is available for Windows, macOS and Linux based operating systems.</p>"},{"location":"Installation/#windows","title":"Windows","text":"<p>Download and extract the Windows version of <code>tfswitch</code> that is compatible with your system. We are building binaries for 386, amd64, arm6 and arm7 CPU structure. See the release page for your download.</p>"},{"location":"Installation/#homebrew","title":"Homebrew","text":"<p>Installation for macOS is the easiest with Homebrew. If you do not have homebrew installed, click here.</p> <pre><code>brew install warrensbox/tap/tfswitch\n</code></pre>"},{"location":"Installation/#linux","title":"Linux","text":"<p>Installation for Linux operating systems.</p> <pre><code>curl -L https://raw.githubusercontent.com/warrensbox/terraform-switcher/master/install.sh | bash\n</code></pre> <p>By default installer script will try to download <code>tfswitch</code> binary into <code>/usr/local/bin</code> To install at custom path use below:</p> <pre><code>curl -L https://raw.githubusercontent.com/warrensbox/terraform-switcher/master/install.sh | bash -s -- -b $HOME/.local/bin\n</code></pre> <p>By default installer script will try to download latest version of <code>tfswitch</code> binary To install custom (not latest) version use:</p> <pre><code>curl -L https://raw.githubusercontent.com/warrensbox/terraform-switcher/master/install.sh | bash -s -- 1.1.1\n</code></pre> <p>Both options can be combined though:</p> <pre><code>curl -L https://raw.githubusercontent.com/warrensbox/terraform-switcher/master/install.sh | bash -s -- -b $HOME/.local/bin 1.1.1\n</code></pre>"},{"location":"Installation/#arch-user-repository-aur-packages-for-arch-linux","title":"Arch User Repository (AUR) packages for Arch Linux","text":"<pre><code># compiled from source\nyay tfswitch\n\n# precompiled\nyay tfswitch-bin\n</code></pre>"},{"location":"Installation/#install-from-source","title":"Install from source","text":"<p>Alternatively, you can install the binary from the source here.</p> <p>Having trouble installing.</p>"},{"location":"Troubleshoot/","title":"Troubleshoot","text":"<p>Problem:</p> <pre><code>install: can't change permissions of /usr/local/bin: Operation not permitted\n</code></pre> <pre><code>\"Unable to remove symlink. You must have SUDO privileges\"\n</code></pre> <pre><code>\"Unable to create symlink. You must have SUDO privileges\"\n</code></pre> <pre><code>install: cannot create regular file '/usr/local/bin/tfswitch': Permission denied\n</code></pre> <p>Solution: You probably need to have privileges to install tfswitch at /usr/local/bin.</p> <p>Try the following:</p> <pre><code>wget https://raw.githubusercontent.com/warrensbox/terraform-switcher/master/install.sh  #Get the installer on to your machine:\n\nchmod 755 install.sh #Make installer executable\n\n./install.sh -b $HOME/.bin #Install tfswitch in a location you have permission:\n\n$HOME/.bin/tfswitch #test\n\nexport PATH=$PATH:$HOME/.bin #Export your .bin into your path\n\n#You should probably add step 4 in your `.bash_profile` in your $HOME directory.\n\n#Next, try:\n`tfswitch -b $HOME/.bin/terraform 0.11.7` \n\n#or simply \n\n`tfswitch -b $HOME/.bin/terraform`\n\n\n</code></pre> <p>See the custom directory option <code>-b</code>: </p>"},{"location":"Upgrade-or-Uninstall/","title":"Upgrade or Uninstall","text":""},{"location":"Upgrade-or-Uninstall/#upgrade","title":"Upgrade:","text":""},{"location":"Upgrade-or-Uninstall/#homebrew","title":"Homebrew","text":"<pre><code>brew upgrade warrensbox/tap/tfswitch\n</code></pre>"},{"location":"Upgrade-or-Uninstall/#linux","title":"Linux","text":"<p>Rerun:</p> <pre><code>curl -L https://raw.githubusercontent.com/warrensbox/terraform-switcher/master/install.sh | bash\n</code></pre>"},{"location":"Upgrade-or-Uninstall/#uninstall","title":"Uninstall:","text":""},{"location":"Upgrade-or-Uninstall/#homebrew_1","title":"Homebrew","text":"<pre><code>brew uninstall warrensbox/tap/tfswitch\n</code></pre>"},{"location":"Upgrade-or-Uninstall/#linux_1","title":"Linux","text":"<p>Run (replace <code>/usr/local/bin</code> if you installed <code>tfswitch</code> to a custom location):</p> <pre><code>rm /usr/local/bin/tfswitch\n</code></pre>"},{"location":"usage/ci-cd/","title":"CI/CD","text":""},{"location":"usage/ci-cd/#set-a-default-tf-version-for-cicd-pipeline","title":"Set a default TF version for CI/CD pipeline","text":"<ol> <li>When using a CI/CD pipeline, you may want a default or fallback version to avoid the pipeline from hanging.</li> <li>Ex: <code>tfswitch -d 1.2.3</code> or <code>tfswitch --default 1.2.3</code> installs version <code>1.2.3</code> when no other versions could be detected. Also, see CICD example</li> </ol>"},{"location":"usage/ci-cd/#automatically-switch-with-bash","title":"Automatically switch with bash","text":"<p>Add the following to the end of your <code>~/.bashrc</code> file: (Use either <code>.tfswitchrc</code> or <code>.terraform-version</code>)</p> <pre><code>cdtfswitch(){\n  builtin cd \"$@\";\n  cdir=$PWD;\n  if [ -e \"$cdir/.tfswitchrc\" ]; then\n    tfswitch\n  fi\n}\nalias cd='cdtfswitch'\n</code></pre>"},{"location":"usage/ci-cd/#automatically-switch-with-zsh","title":"Automatically switch with zsh","text":"<p>Add the following to the end of your <code>~/.zshrc</code> file:</p> <pre><code>load-tfswitch() {\n  local tfswitchrc_path=\".tfswitchrc\"\n\n  if [ -f \"$tfswitchrc_path\" ]; then\n    tfswitch\n  fi\n}\nadd-zsh-hook chpwd load-tfswitch\nload-tfswitch\n</code></pre> <p>NOTE: if you see an error like this: <code>command not found: add-zsh-hook</code>, then you might be on an older version of zsh (see below), or you simply need to load <code>add-zsh-hook</code> by adding this to your <code>.zshrc</code>:    <code>autoload -U add-zsh-hook</code></p>"},{"location":"usage/ci-cd/#older-version-of-zsh","title":"Older version of zsh","text":"<pre><code>cd(){\n  builtin cd \"$@\";\n  cdir=$PWD;\n  if [ -e \"$cdir/.tfswitchrc\" ]; then\n    tfswitch\n  fi\n}\n</code></pre>"},{"location":"usage/ci-cd/#automatically-switch-with-fish-shell","title":"Automatically switch with fish shell","text":"<p>Add the following to the end of your <code>~/.config/fish/config.fish</code> file:</p> <pre><code>function switch_terraform --on-event fish_postexec\n    string match --regex '^cd\\s' \"$argv\" &gt; /dev/null\n    set --local is_command_cd $status\n\n    if test $is_command_cd -eq 0\n      if count *.tf &gt; /dev/null\n\n        grep -c \"required_version\" *.tf &gt; /dev/null\n        set --local tf_contains_version $status\n\n        if test $tf_contains_version -eq 0\n            command tfswitch\n        end\n      end\n    end\nend\n</code></pre>"},{"location":"usage/commandline/","title":"Command line","text":""},{"location":"usage/commandline/#use-dropdown-menu-to-select-version","title":"Use dropdown menu to select version","text":"<ol> <li>You can switch between different versions of terraform by typing the command <code>tfswitch</code> on your terminal.</li> <li>Select the version of terraform you require by using the up and down arrow.</li> <li>Hit Enter to select the desired version.</li> </ol> <p>The most recently selected versions are presented at the top of the dropdown.</p>"},{"location":"usage/commandline/#supply-version-on-command-line","title":"Supply version on command line","text":"<ol> <li>You can also supply the desired version as an argument on the command line.</li> <li>For example, <code>tfswitch 0.10.5</code> for version 0.10.5 of terraform.</li> <li>Hit Enter to switch.</li> </ol>"},{"location":"usage/commandline/#see-all-versions-including-beta-alpha-and-release-candidatesrc","title":"See all versions including beta, alpha and release candidates(rc)","text":"<ol> <li>Display all versions including beta, alpha and release candidates(rc).</li> <li>For example, <code>tfswitch -l</code> or <code>tfswitch --list-all</code> to see all versions.</li> <li>Hit Enter to select the desired version.</li> </ol>"},{"location":"usage/commandline/#use-environment-variables","title":"Use environment variables","text":"<p>You can also set environment variables for tfswitch to override some configurations:</p>"},{"location":"usage/commandline/#tf_version","title":"<code>TF_VERSION</code>","text":"<p><code>TF_VERSION</code> environment variable can be set to your desired terraform version.</p> <p>For example:</p> <pre><code>export TF_VERSION=\"0.14.4\"\ntfswitch # Will automatically switch to terraform version 0.14.4\n</code></pre>"},{"location":"usage/commandline/#tf_default_version","title":"<code>TF_DEFAULT_VERSION</code>","text":"<p><code>TF_DEFAULT_VERSION</code> environment variable can be set to your desired terraform version that will be used as a fallback version, if not other sources are found.</p> <p>For example:</p> <pre><code>export TF_DEFAULT_VERSION=\"0.14.4\"\ntfswitch # Will automatically switch to terraform version 0.14.4\n</code></pre>"},{"location":"usage/commandline/#tf_product","title":"<code>TF_PRODUCT</code>","text":"<p><code>TF_PRODUCT</code> environment variable can be set to your desired product/tool.</p> <p>This can either be set to:</p> <ul> <li><code>terraform</code></li> <li><code>opentofu</code></li> </ul> <p>For example:</p> <pre><code>export TF_PRODUCT=\"opentofu\"\ntfswitch # Will install opentofu instead of terraform\n</code></pre>"},{"location":"usage/commandline/#tf_log_level","title":"<code>TF_LOG_LEVEL</code>","text":"<p><code>TF_LOG_LEVEL</code> environment variable can be set to override default log level.</p> <ul> <li>Supported log levels:</li> <li><code>ERROR</code>:  includes <code>PANIC</code>, <code>FATAL</code>, <code>ERROR</code></li> <li><code>INFO</code>:   includes <code>PANIC</code>, <code>FATAL</code>, <code>ERROR</code>, <code>WARN</code>, <code>INFO</code> (default)</li> <li><code>NOTICE</code>: includes <code>PANIC</code>, <code>FATAL</code>, <code>ERROR</code>, <code>WARN</code>, <code>NOTICE</code>, <code>INFO</code></li> <li><code>DEBUG</code>:  includes <code>PANIC</code>, <code>FATAL</code>, <code>ERROR</code>, <code>WARN</code>, <code>NOTICE</code>, <code>INFO</code>, <code>DEBUG</code></li> <li><code>TRACE</code>:  includes <code>PANIC</code>, <code>FATAL</code>, <code>ERROR</code>, <code>WARN</code>, <code>NOTICE</code>, <code>INFO</code>, <code>DEBUG</code>, <code>TRACE</code></li> <li>Any other log level value falls under default logging level</li> </ul> <p>For example:</p> <pre><code>export TF_LOG_LEVEL=\"DEBUG\"\ntfswitch # Will output debug logs\n</code></pre>"},{"location":"usage/commandline/#tf_arch","title":"<code>TF_ARCH</code>","text":"<p><code>TF_ARCH</code> environment variable can be set to override default CPU architecture of downloaded binaries.</p> <ul> <li>This can be set to any string, though incorrect values will result in download failure.</li> <li>Suggested values: <code>amd64</code>, <code>arm64</code>, <code>386</code>.</li> <li>Check available Arch types at:</li> <li>Terraform Downloads</li> <li>OpenTofu Downloads</li> </ul> <p>For example:</p> <pre><code>export TF_ARCH=\"amd64\"\ntfswitch # Will install binary for amd64 architecture\n</code></pre>"},{"location":"usage/commandline/#tf_binary_path","title":"<code>TF_BINARY_PATH</code>","text":"<p><code>tfswitch</code> defaults to install to the <code>/usr/local/bin/</code> directory (and falls back to <code>$HOME/bin/</code> otherwise). The target filename is resolved automatically based on the <code>product</code> parameter. <code>TF_BINARY_PATH</code> environment variable can be set to specify a full installation path (directory + file name). If target directory does not exist, <code>tfswitch</code> falls back to <code>$HOME/bin/</code> directory.</p> <p>For example:</p> <pre><code>export TF_BINARY_PATH=\"$HOME/bin/terraform\" # Path to the file\ntfswitch # Will install binary as $HOME/bin/terraform\n</code></pre>"},{"location":"usage/commandline/#tf_install_path","title":"<code>TF_INSTALL_PATH</code>","text":"<p><code>tfswitch</code> defaults to download binaries to the <code>$HOME/.terraform.versions/</code> directory. <code>TF_INSTALL_PATH</code> environment variable can be set to specify the parent directory for <code>.terraform.versions</code> directory. Current user must have write permissions to the target directory. If the target directory does not exist, <code>tfswitch</code> will create it.</p> <p>For example:</p> <pre><code>export TF_INSTALL_PATH=\"/var/cache\" # Path to the directory where `.terraform.versions` directory resides\ntfswitch # Will download actual binary to /var/cache/.terraform.versions/\n</code></pre>"},{"location":"usage/commandline/#install-latest-version-only","title":"Install latest version only","text":"<ol> <li>Install the latest stable version only.</li> <li>Run <code>tfswitch -u</code> or <code>tfswitch --latest</code>.</li> <li>Hit Enter to install.</li> </ol>"},{"location":"usage/commandline/#install-latest-implicit-version-for-stable-releases","title":"Install latest implicit version for stable releases","text":"<ol> <li>Install the latest implicit stable version.</li> <li>Ex: <code>tfswitch -s 0.13</code> or <code>tfswitch --latest-stable 0.13</code> downloads 0.13.6 (latest) version.</li> <li>Hit Enter to install.</li> </ol>"},{"location":"usage/commandline/#install-latest-implicit-version-for-beta-alpha-and-release-candidatesrc","title":"Install latest implicit version for beta, alpha and release candidates(rc)","text":"<ol> <li>Install the latest implicit pre-release version.</li> <li>Ex: <code>tfswitch -p 0.13</code> or <code>tfswitch --latest-pre 0.13</code> downloads 0.13.0-rc1 (latest) version.</li> <li>Hit Enter to install.</li> </ol>"},{"location":"usage/commandline/#show-latest-version-only","title":"Show latest version only","text":"<ol> <li>Just show what the latest version is.</li> <li>Run <code>tfswitch -U</code> or <code>tfswitch --show-latest</code></li> <li>Hit Enter to show.</li> </ol>"},{"location":"usage/commandline/#show-latest-implicit-version-for-stable-releases","title":"Show latest implicit version for stable releases","text":"<ol> <li>Show the latest implicit stable version.</li> <li>Ex: <code>tfswitch -S 0.13</code> or <code>tfswitch --show-latest-stable 0.13</code> shows 0.13.6 (latest) version.</li> <li>Hit Enter to show.</li> </ol>"},{"location":"usage/commandline/#show-latest-implicit-version-for-beta-alpha-and-release-candidatesrc","title":"Show latest implicit version for beta, alpha and release candidates(rc)","text":"<ol> <li>Show the latest implicit pre-release version.</li> <li>Ex: <code>tfswitch -P 0.13</code> or <code>tfswitch --show-latest-pre 0.13</code> shows 0.13.0-rc1 (latest) version.</li> <li>Hit Enter to show.</li> </ol>"},{"location":"usage/commandline/#use-custom-mirror","title":"Use custom mirror","text":"<p>To install from a remote mirror other than the default(https://releases.hashicorp.com/terraform). Use the <code>-m</code> or <code>--mirror</code> parameter.</p> <pre><code>tfswitch --mirror https://example.jfrog.io/artifactory/hashicorp`\n</code></pre>"},{"location":"usage/commandline/#install-to-non-default-location","title":"Install to non-default location","text":"<p>By default <code>tfswitch</code> will download the Terraform binary to the user home directory under this path: <code>$HOME/.terraform.versions</code></p> <p>If you want to install the binaries outside of the home directory then you can provide the <code>-i</code> or <code>--install</code> to install Terraform binaries to a non-standard path. Useful if you want to install versions of Terraform that can be shared with multiple users.</p> <p>The Terraform binaries will then be placed in the directory <code>.terraform.versions</code> under the custom install path e.g. <code>/opt/terraform/.terraform.versions</code></p> <pre><code>tfswitch -i /opt/terraform\n</code></pre> <p>NOTE: The directory passed in <code>-i</code>/<code>--install</code> must be created before running <code>tfswitch</code></p>"},{"location":"usage/commandline/#install-binary-for-non-default-architecture","title":"Install binary for non-default architecture","text":"<p>By default <code>tfswitch</code> will download the binary for the architecture of the host machine.</p> <p>If you want to download the binary for non-default CPU architecture then you can provide the <code>-A</code> or <code>--arch</code> command line argument to download binaries for custom CPU architecture. Useful if you need to override binary architecture for whatever reason.</p> <pre><code>tfswitch --arch amd64\n</code></pre> <p>NOTE: If the target file already exists in the download directory (See Install to non-default location section above), it will be not downloaded. Downloaded files are stored without the architecture in the filename. Format of the filenames in download directory: <code>&lt;product&gt;_&lt;version&gt;</code>. E.g. <code>terraform_1.10.4</code>.</p>"},{"location":"usage/config-files/","title":"Config files","text":""},{"location":"usage/config-files/#get-the-version-from-a-subdirectory","title":"Get the version from a subdirectory","text":"<p>While using the file configuration it might be necessary to change the working directory. You can do that with the <code>--chdir</code> or <code>-c</code> parameter.</p> <pre><code>tfswitch --chdir terraform_dir\ntfswitch -c terraform_dir\n</code></pre>"},{"location":"usage/config-files/#use-versiontf-file","title":"Use <code>version.tf</code> file","text":"<p>If a <code>.tf</code> file with the version constraints is included in the current directory, <code>tfswitch</code> should automatically download or switch to that terraform version. Also please refer to Order of Terraform version definition precedence page for more information on how <code>tfswitch</code> determines the version to use. For example, the following should automatically switch to the latest available version newer than <code>0.12.8</code>:  </p> <pre><code>terraform {\n  required_version = \"&gt;= 0.12.9\"\n\n  required_providers {\n    aws        = \"&gt;= 2.52.0\"\n    kubernetes = \"&gt;= 1.11.1\"\n  }\n}\n</code></pre> <p></p>"},{"location":"usage/config-files/#use-tfswitchrc-file","title":"Use <code>.tfswitchrc</code> file","text":"<ol> <li>Create a <code>.tfswitchrc</code> file containing the desired version</li> <li>For example, <code>echo \"0.10.5\" &gt;&gt; .tfswitchrc</code> for version <code>0.10.5</code></li> <li>Run the command <code>tfswitch</code> in the same directory as this <code>.tfswitchrc</code> file</li> </ol> <p>Instead of a <code>.tfswitchrc</code> file, a <code>.terraform-version</code> file may be used for compatibility with <code>tfenv</code> and other tools which use it</p>"},{"location":"usage/config-files/#use-tfswitchtoml-file-for-non-admin-users-with-limited-privilege-on-their-computers","title":"Use <code>.tfswitch.toml</code> file  (For non-admin users with limited privilege on their computers)","text":"<p><code>tfswitch</code> defaults to install to the <code>/usr/local/bin/</code> directory (and falls back to <code>$HOME/bin/</code> otherwise). The target filename is resolved automatically based on the <code>product</code> attribute (see below). If you do not have write access to <code>/usr/local/bin/</code> directory, you can use the <code>.tfswitch.toml</code> file to specify a full installation path (directory + file name). This is similar to using a <code>.tfswitchrc</code> file, but you specify a custom binary path for the installation:</p> <p> </p> <ol> <li>Create a directory for the custom binary path. Ex: <code>mkdir -p \"$HOME/bin/\"</code></li> <li>Add the path to the directory to your <code>PATH</code> environment variable. Ex: <code>export PATH=\"$PATH:$HOME/bin\"</code> (add this to your Bash profile or Zsh profile)</li> <li>Pass <code>-b</code> or <code>--bin</code> parameter with the custom binary path as value (this must be a first level pointer inside the directory from above). Ex: <code>tfswitch -b \"$HOME/bin/terraform\" 0.10.8</code></li> <li>If target directory for custom binary path does not exist, <code>tfswitch</code> falls back to <code>$HOME/bin/</code> directory</li> <li>Optionally, you can create a <code>.tfswitch.toml</code> file in your home directory (<code>~/.tfswitch.toml</code>)</li> <li>Your <code>~/.tfswitch.toml</code> file should look like this:</li> </ol> <pre><code>bin = \"$HOME/bin/terraform\"\nversion = \"0.11.3\"\n</code></pre> <ol> <li>Run <code>tfswitch</code> and it should automatically install the required version in the specified binary path</li> </ol> <p>Below is an example for <code>$HOME/.tfswitch.toml</code> on Windows:</p> <pre><code>bin = \"C:\\\\Users\\\\&lt;%USRNAME%&gt;\\\\bin\\\\terraform.exe\"\n</code></pre>"},{"location":"usage/config-files/#setting-the-default-fallback-version-using-tfswitchtoml-file","title":"Setting the default (fallback) version using <code>.tfswitch.toml</code> file","text":"<p>By default, if <code>tfswsitch</code> is unable to determine the version to use, it errors out. The <code>.tfswitch.toml</code> file can be configured with a <code>default-version</code> attribute for <code>tfswitch</code> to use a particular version, if no other sources of versions are found</p> <pre><code>default-version = \"1.5.4\"\n</code></pre>"},{"location":"usage/config-files/#setting-product-using-tfswitchtoml-file","title":"Setting product using <code>.tfswitch.toml</code> file","text":"<p><code>tfswitch</code> defaults to install Terraform binaries. The <code>.tfswitch.toml</code> file can be configured with a <code>product</code> attribute for <code>tfswitch</code> to use either Terraform or OpenTofu by default:</p> <pre><code>product = \"opentofu\"\n</code></pre> <p>or</p> <pre><code>product = \"terraform\"\n</code></pre>"},{"location":"usage/config-files/#setting-log-level-using-tfswitchtoml-file","title":"Setting log level using <code>.tfswitch.toml</code> file","text":"<p><code>tfswitch</code> defaults to <code>INFO</code> log level. The <code>.tfswitch.toml</code> file can be configured with a <code>log-level</code> attribute for <code>tfswitch</code> to use non-default logging verbosity:</p> <pre><code>log-level = \"INFO\"\n</code></pre> <ul> <li>Supported log levels:</li> <li><code>ERROR</code>:  includes <code>PANIC</code>, <code>FATAL</code>, <code>ERROR</code></li> <li><code>INFO</code>:   includes <code>PANIC</code>, <code>FATAL</code>, <code>ERROR</code>, <code>WARN</code>, <code>INFO</code> (default)</li> <li><code>NOTICE</code>: includes <code>PANIC</code>, <code>FATAL</code>, <code>ERROR</code>, <code>WARN</code>, <code>NOTICE</code>, <code>INFO</code></li> <li><code>DEBUG</code>:  includes <code>PANIC</code>, <code>FATAL</code>, <code>ERROR</code>, <code>WARN</code>, <code>NOTICE</code>, <code>INFO</code>, <code>DEBUG</code></li> <li><code>TRACE</code>:  includes <code>PANIC</code>, <code>FATAL</code>, <code>ERROR</code>, <code>WARN</code>, <code>NOTICE</code>, <code>INFO</code>, <code>DEBUG</code>, <code>TRACE</code></li> <li>Any other log level value falls under default logging level</li> </ul>"},{"location":"usage/config-files/#overriding-cpu-architecture-type-for-the-downloaded-binary-using-tfswitchtoml-file","title":"Overriding CPU architecture type for the downloaded binary using <code>.tfswitch.toml</code> file","text":"<p>CPU architecture of the downloaded binaries defaults to <code>tfswitch</code>'s host architecture. The <code>.tfswitch.toml</code> file can be configured with a <code>arch</code> attribute for <code>tfswitch</code> to download binary of non-default architecture type:</p> <pre><code>arch = \"arm64\"\n</code></pre> <ul> <li>This can be set to any string, though incorrect values will result in download failure.</li> <li>Suggested values: <code>amd64</code>, <code>arm64</code>, <code>386</code>.</li> <li>Check available Arch types at:</li> <li>Terraform Downloads</li> <li>OpenTofu Downloads</li> </ul>"},{"location":"usage/config-files/#overriding-installation-directory-where-actual-binaries-are-stored-using-tfswitchtoml-file","title":"Overriding installation directory, where actual binaries are stored, using <code>.tfswitch.toml</code> file","text":"<p><code>tfswitch</code> defaults to download binaries to the <code>$HOME/.terraform.versions/</code> directory. The <code>.tfswitch.toml</code> file can be configured with a <code>install</code> attribute to specify the parent directory for <code>.terraform.versions</code> directory.</p> <pre><code>install = \"/var/cache\"\n</code></pre> <p>NOTE: - Current user must have write permissions to the target directory - If the target directory does not exist, <code>tfswitch</code> will create it</p>"},{"location":"usage/config-files/#use-terragrunthcl-file","title":"Use <code>terragrunt.hcl</code> file","text":"<p>If a terragrunt.hcl file with the terraform constraint is included in the current directory, it should automatically download or switch to that terraform version. For example, the following should automatically switch Terraform to the latest version 0.13:</p> <pre><code>terragrunt_version_constraint = \"&gt;= 0.26, &lt; 0.27\"\nterraform_version_constraint  = \"&gt;= 0.13, &lt; 0.14\"\n...\n</code></pre>"},{"location":"usage/general/","title":"General","text":""},{"location":"usage/general/#order-of-terraform-version-definition-precedence","title":"Order of Terraform version definition precedence","text":"Order Method 1 <code>$HOME/.tfswitch.toml</code> (<code>version</code> parameter) 2 <code>.tfswitchrc</code> (version as a string) 3 <code>.terraform-version</code> (version as a string) 4 Terraform root module (<code>required_version</code> constraint) 5 <code>terragrunt.hcl</code> (<code>terraform_version_constraint</code> parameter) 6 Environment variable (<code>TF_VERSION</code>) <p>With 1 being the lowest precedence and 7 \u2014 the highest (If you disagree with this order of precedence, please open an issue)</p>"}]}