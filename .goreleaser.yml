# https://goreleaser.com/
env:
  - CGO_ENABLED=0 # Build statically linked binaries
builds:
  -
    ldflags:
      - -s -w -X "main.version={{.Env.RELEASE_VERSION}}"
    main: main.go
    binary: tfswitch
    goos:
      - darwin
      - linux
      - windows
    goarch:
      - 386
      - amd64
      - arm
      - arm64
    goarm:
      - 6
      - 7
    ignore:
      - goos: windows
        goarch: arm64    
checksum:
  name_template: '{{ .ProjectName }}_{{.Env.RELEASE_VERSION}}_checksums.txt'

archives:
  - id: archives
    name_template: >-
      {{- .ProjectName }}_
      {{- .Env.RELEASE_VERSION }}_
      {{- .Os }}_
      {{- .Arch }}
      {{- if .Arm }}v{{ .Arm }}{{ end -}}

brews:
  -
    # Name of the recipe
    # Default to project name
    name: tfswitch

    # GitHub/GitLab repository to push the formula to
    # Gitea is not supported yet, but the support coming
    repository:
      owner: warrensbox
      name: homebrew-tap
      token: "{{ .Env.PERSONAL_ACCESS_TOKEN }}"

    # Reporitory to push the tap to.
    # github:
    #   owner: warrensbox
    #   name: homebrew-tap

    # Allows you to set a custom download strategy.
    # Default is empty.
    #download_strategy: GitHubPrivateRepositoryReleaseDownloadStrategy

    # Git author used to commit to the repository.
    # Defaults are shown.
    commit_author:
      name: Warren Veerasingam
      email: warren.veerasingam@gmail.com

    # Folder inside the repository to put the formula.
    # Default is the root folder.
    directory: Formula

    # Caveats for the user of your binary.
    # Default is empty.
    caveats: "Type 'tfswitch' on your command line and choose the terraform version that you want from the dropdown. This command currently only works on macOS and Linux"

    # Your app's homepage.
    # Default is empty.
    homepage: "https://warrensbox.github.io/terraform-switcher"

    # Your app's description.
    # Default is empty.
    description: "The tfswitch command lets you switch between terraform versions."

    # Packages that conflict with your package.
    conflicts:
      - terraform

    # Setting this will prevent goreleaser to actually try to commit the updated
    # formula - instead, the formula file will be stored on the dist folder only,
    # leaving the responsibility of publishing it to the user.
    # Default is false.
    skip_upload: false

    # So you can `brew test` your formula.
    # Default is empty.
    test: |
      system "#{bin}/tfswitch --version"
    # Custom install script for brew.
    # Default is 'bin.install "program"'.
    install: |
      bin.install "tfswitch"

changelog:
  # Set this to true if you don't want any changelog at all.
  # Templates: allowed
  disable: "{{ .Env.NO_CREATE_CHANGELOG }}"

  # Changelog generation implementation to use.
  #
  # Valid options are:
  # - `git`: uses `git log`;
  # - `github`: uses the compare GitHub API, appending the author login to the changelog.
  # - `gitlab`: uses the compare GitLab API, appending the author name and email to the changelog.
  # - `github-native`: uses the GitHub release notes generation API, disables the groups feature.
  #
  # Default: 'git'
  use: github

  # Sorts the changelog by the commit's messages.
  # Could either be asc, desc or empty
  # Empty means 'no sorting', it'll use the output of `git log` as is.
  sort:

  # Max commit hash length to use in the changelog.
  #
  # 0: use whatever the changelog implementation gives you
  # -1: remove the commit hash from the changelog
  # any other number: max length.
  abbrev: -1

  # Group commits messages by given regex and title.
  # Order value defines the order of the groups.
  # Providing no regex means all commits will be grouped under the default group.
  #
  # Matches are performed against the first line of the commit message only,
  # prefixed with the commit SHA1, usually in the form of
  # `<abbrev-commit>[:] <title-commit>`.
  # Groups are disabled when using github-native, as it already groups things by itself.
  # Regex use RE2 syntax as defined here: https://github.com/google/re2/wiki/Syntax.
  groups:
    - title: Features
      order: 0
      regexp: '^.*?feat(ure)?(\([[:word:]]+\))??!?:.+$'
    - title: "Bug fixes"
      order: 1
      regexp: '^.*?(bug(fix)?|fix)(\([[:word:]]+\))??!?:.+$'
    - title: Documentation
      order: 2
      regexp: "^.*?doc(s|umentation).*"
    - title: Go
      order: 3
      regexp: "^.*?go: "
    - title: Others
      order: 999

  filters:
    # Commit messages matching the regexp listed here will be removed from
    # the changelog
    #
    # Matches are performed against the first line of the commit message only,
    # prefixed with the commit SHA1, usually in the form of
    # `<abbrev-commit>[:] <title-commit>`.
    exclude:
      - "^.*?Merge pull request "
      - "^.*?test(ing)?"

    # Commit messages matching the regexp listed here will be the only ones
    # added to the changelog
    #
    # If include is not-empty, exclude will be ignored.
    #
    # Matches are performed against the first line of the commit message only,
    # prefixed with the commit SHA1, usually in the form of
    # `<abbrev-commit>[:] <title-commit>`.
    #
    # Since: v1.19
    #include:
    #  - "^feat:"
